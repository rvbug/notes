"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[1432],{6288:(e,n,i)=>{i.r(n),i.d(n,{assets:()=>l,contentTitle:()=>r,default:()=>d,frontMatter:()=>o,metadata:()=>t,toc:()=>c});var t=i(3640),s=i(4848),a=i(8453);const o={slug:"dotfiles",title:"Dotfiles",authors:["rakesh"],tags:["dotfiles"]},r="Introduction",l={authorsImageUrls:[void 0]},c=[{value:"The List",id:"the-list",level:2},{value:"Mac",id:"mac",level:2},{value:"Homebrew &amp; Git",id:"homebrew--git",level:3},{value:"Installing softwares",id:"installing-softwares",level:3},{value:"Data Science and ML",id:"data-science-and-ml",level:3},{value:"Final configuration",id:"final-configuration",level:3},{value:"Linux",id:"linux",level:2},{value:"OS and Package Manager",id:"os-and-package-manager",level:3},{value:"Additional checks",id:"additional-checks",level:3},{value:"Docker Support",id:"docker-support",level:2},{value:"Config files",id:"config-files",level:2}];function h(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",hr:"hr",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsxs)(n.p,{children:["In the first part of my ",(0,s.jsx)(n.code,{children:"Productivity"})," series, we talked about configuring ",(0,s.jsx)(n.a,{href:"https://neovim.io/",children:"Neovim"})," as your IDE. You can check out that ",(0,s.jsx)(n.a,{href:"https://rvbug.hashnode.dev/configuring-neovim",children:"blog"})," and my configuration ",(0,s.jsx)(n.a,{href:"https://github.com/rvbug/neovim",children:"here"}),"."]}),"\n",(0,s.jsx)(n.hr,{}),"\n",(0,s.jsxs)(n.p,{children:["In this part, let us talk about the magic of ",(0,s.jsx)(n.strong,{children:".dotfiles"}),", how to automate your development workflow, manage repetitive tasks by installing softwares, setting up editor shortcuts, and even configuring the development environment across multiple machines for a unified experience."]}),"\n",(0,s.jsx)(n.h1,{id:"dotfiles---what-are-they",children:"dotfiles - What are they?"}),"\n",(0,s.jsx)(n.p,{children:"dotfiles are configuration files with a dot(.) leading the filename. They are usually found on all *nix based systems helping store various settings and configurations."}),"\n",(0,s.jsx)(n.p,{children:"Here's how to find them - Open your favourite terminal and try the following command to show all the hidden files/directories."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"$> ls -a\n"})}),"\n",(0,s.jsx)(n.h1,{id:"os",children:"OS"}),"\n",(0,s.jsx)(n.p,{children:"This script has been tested on:"}),"\n",(0,s.jsxs)(n.ul,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Mac Sonoma"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Mac Ventura (Virtual Environment)"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Ubuntu (Virtual Environment)"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Fedora (Virtual Environment)"}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"Docker - Ubuntu, Fedora and Debian"}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"workflow",children:"Workflow"}),"\n",(0,s.jsx)(n.p,{children:"Download the repo"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# clone the repo\n$> git clone https://github.com/rvbug/.dotfiles\n\n# check if the .dotfile directory is available\n$> ls -a \n\n# cd into the folder\n$> cd .dotfiles\n\n# run the first script \n$> ./install.sh\n\n# Note: if you want to run it in a debug mode, try\n# $> sh -x install.sh\n"})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"install.sh"})," is the entry point which checks for OS version"]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'#check the OS version\nos=$(uname -s)\n\n# If it is Darwin then should be mac \nif [ $os == "Darwin" ]; then \n#...\n# run mac script\n./macos.sh\n#...\n# Linux variant \nelif [ $os == "Linux" ]; then\n#...\n# call linux script\n./linux.sh\n'})}),"\n",(0,s.jsx)(n.h2,{id:"the-list",children:"The List"}),"\n",(0,s.jsxs)(n.p,{children:["Since these are highly personal configurations, the requirement was to make these scripts flexible and easy to use and maintain . The newer version now uses text files from the previous ",(0,s.jsx)(n.code,{children:"YAML"})," based configuration."]}),"\n",(0,s.jsx)(n.p,{children:"Below are the three text files used in the script:"}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"software_list.txt"})," - List of all softwares to be installed on your machine."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"pip_list.txt"})," - If you are into Data Science or ML then you can add or remove the libraries. e.g. If you use PyTorch , just swap it with Tensorflow."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"config_list.txt"})," - List of all dotfiles to be maintained."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Note"}),": YAML is a widely used data serialization language for writing configuration files."]}),"\n",(0,s.jsx)(n.h2,{id:"mac",children:"Mac"}),"\n",(0,s.jsxs)(n.p,{children:["If mac is detected then it will look if ",(0,s.jsx)(n.a,{href:"https://brew.sh/",children:"Homebrew"})," (package manager) and git is installed already."]}),"\n",(0,s.jsx)(n.h3,{id:"homebrew--git",children:"Homebrew & Git"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# check if homebrew is already installed\nif command -v brew &>/dev/null; then\n  echo "Homebrew already installed"\nelse\n# if not install \n  echo "##### Installing homebrew..."\n#...\nfi\n\n#...\n\n# checking for git on your machine.\nif command -v git &>/dev/null; then\n  echo "git already installed..."\n#...\n'})}),"\n",(0,s.jsx)(n.h3,{id:"installing-softwares",children:"Installing softwares"}),"\n",(0,s.jsxs)(n.p,{children:["The next step is to check if ",(0,s.jsx)(n.code,{children:"software_list.txt"})," file is available to start the installation process. For certain softwares like Lua, specific version is required. For OCaml, users have an option to skip the installation."]}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Note:"}),' Ocaml is a general purpose "functional" programming language. You can read more about it ',(0,s.jsx)(n.a,{href:"https://ocaml.org/",children:"here"}),"."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:' # check if lua is already is installed\nif brew list lua &>/dev/null; then\n#...\n# if not then install via brew\nbrew install lua@5.4\n\n#...\n\n# check with user for OCaml installation\nread -p "do you want to install ocaml? (y/n): " choice\n#...\n'})}),"\n",(0,s.jsx)(n.h3,{id:"data-science-and-ml",children:"Data Science and ML"}),"\n",(0,s.jsxs)(n.p,{children:["Then comes installing Data Science tools. The only requirement is to have ",(0,s.jsx)(n.code,{children:"pyyaml"})," installed on your machine."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# check for pyyaml installation\n# install if not available.\nif brew list pyyaml &>/dev/null; then\n"})}),"\n",(0,s.jsxs)(n.p,{children:["I have a ",(0,s.jsx)(n.a,{href:"https://github.com/rvbug/cookie-ml",children:"repo"})," where you get a cookie-cutter template for ML projects. It downloads the repo and sets up your machine to get you started immediately."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# checks if cookie-cutter is already installed\n# in your home directory\nif [ -d "$HOME/ml-cookie-cutter" ]; then\n\n# if not then download the repo \n# install and activate virtual env \necho "####### activating the venv..."\nsource venv/bin/activate \n\n# ensure pip is installed and then start \n# installing the ML libraries\npip3 install $cfg\n\n# Once done the cleanup starts...\n# delete the downloaded repo and \n# deactivate the virtual env\n#...\n'})}),"\n",(0,s.jsx)(n.h3,{id:"final-configuration",children:"Final configuration"}),"\n",(0,s.jsx)(n.p,{children:"Now on to the final steps of the installation process - Back up the existing configuration files and check for Neovim."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# Take the backup of the existing config files\ncp $HOME/$line $HOME/$line.bak.$(date +%Y-%m-%d-%H:%M:%S)\n\n# If Neovim is already installed, need to \n# backup the existing configuration\ncp -r $HOME/.config/nvim/ $HOME/.config/nvim.bak.$dt\n"})}),"\n",(0,s.jsx)(n.p,{children:"The script will check for xcode command-line tools"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# check for commandline tools\nxcode-select --version > /dev/null\n\n# if not then install them\nxcode-select --install\n"})}),"\n",(0,s.jsx)(n.h2,{id:"linux",children:"Linux"}),"\n",(0,s.jsx)(n.p,{children:"For Linux, most of the process remains the same with a few subtle differences."}),"\n",(0,s.jsx)(n.h3,{id:"os-and-package-manager",children:"OS and Package Manager"}),"\n",(0,s.jsx)(n.p,{children:"The script first checks the version of Linux and sets the package manager."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:"# if Ubuntu or Debian, then set the package as ap-get\npkg_mgr=apt-get\n# If Fedora, then go for dnf \npkg_mgr=dnf \n# if dnf is not available go for yum\n"})}),"\n",(0,s.jsx)(n.h3,{id:"additional-checks",children:"Additional checks"}),"\n",(0,s.jsxs)(n.p,{children:["Never (",(0,s.jsx)(n.strong,{children:"ever"}),") run any script as a root user, the script warns if you do so and also check for sudo access. Few software installations are skipped if it is not supported by that operating system."]}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# caution the user if it is root user\nuser=$(whoami)\nif [ "$user" == "root" ]; then\n\n# Option to run this with sudo access\nread -p "do you want to run this script as sudo (y/n)?" choice\n\n# check if you want to upgrade your system\n# before starting the installation\n$su_user $pkg_mgr update -y\n'})}),"\n",(0,s.jsx)(n.h2,{id:"docker-support",children:"Docker Support"}),"\n",(0,s.jsx)(n.p,{children:"If you want to try out this script on docker containers then here are some helpful commands. You can download the images and run the container as shown below."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-bash",children:'# To pull the images\ndocker pull fedora # debian # or ubuntu\n\n# run the container\n$> docker run --name fedora -d -i -t fedora /bin/bash\n\n# check the processes\n$> docker ps\n\n# to drop inside the container\n# replace the container-id with the number \n# shown with the above command\n$> docker exec -it "container-id" /bin/bash\n'})}),"\n",(0,s.jsxs)(n.p,{children:[(0,s.jsx)(n.code,{children:"Note"}),' If you are using the docker machine, you will be dropped into the container as "root".']}),"\n",(0,s.jsx)(n.h2,{id:"config-files",children:"Config files"}),"\n",(0,s.jsx)(n.p,{children:"I used the following files for my machine configuration:"}),"\n",(0,s.jsxs)(n.ol,{children:["\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:".zshrc - This helps to configure your shell and is known to provide great customization."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:".tmux.conf - If you are like me managing multiple projects, why not consider a terminal multiplexer like tmux. It helps create sessions with multiple windows and panes which can be attached and detached easily."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:".wezterm.lua - I migrated from iterm to a rust based terminal called wezterm, which uses lua based configuration."}),"\n"]}),"\n",(0,s.jsxs)(n.li,{children:["\n",(0,s.jsx)(n.p,{children:"startship.toml - It is used for customizing your shell prompt."}),"\n"]}),"\n"]}),"\n",(0,s.jsx)(n.h1,{id:"conclusion",children:"Conclusion"}),"\n",(0,s.jsx)(n.p,{children:"Here's how I created a simple script to set the installation and configuration automatically. Use this as an inspiration to build your own personalized configuration."}),"\n",(0,s.jsx)(n.h1,{id:"reference",children:"Reference"}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://rvbug.hashnode.dev/configuring-neovim",children:"Productivity Series I - Blog"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/rvbug/neovim",children:"My Neovim Configuration"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/rvbug/.dotfiles",children:"My Dotfiles - Github"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://github.com/tmux/tmux/wiki",children:"Terminal Multiplexer"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://wezfurlong.org/wezterm/index.html",children:"Wezterm - Rust based Terminal"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://starship.rs/",children:"Starship - Customizable Shell Prompt"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://www.docker.com/",children:"Docker"})}),"\n",(0,s.jsx)(n.p,{children:(0,s.jsx)(n.a,{href:"https://ocaml.org/",children:"OCaml - Functional Programming Lang"})})]})}function d(e={}){const{wrapper:n}={...(0,a.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(h,{...e})}):h(e)}},8453:(e,n,i)=>{i.d(n,{R:()=>o,x:()=>r});var t=i(6540);const s={},a=t.createContext(s);function o(e){const n=t.useContext(a);return t.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function r(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:o(e.components),t.createElement(a.Provider,{value:n},e.children)}},3640:e=>{e.exports=JSON.parse('{"permalink":"/notes/blog/dotfiles","source":"@site/blog/2024-04-21/Dotfiles.md","title":"Dotfiles","description":"In the first part of my Productivity series, we talked about configuring Neovim as your IDE. You can check out that blog and my configuration here.","date":"2024-04-21T00:00:00.000Z","tags":[{"inline":false,"label":"dotfiles","permalink":"/notes/blog/tags/dotfiles","description":"dotfiles"}],"readingTime":6.025,"hasTruncateMarker":true,"authors":[{"name":"rakesh","title":"Sr. Engineering Manager","url":"https://qubitai.in","page":{"permalink":"/notes/blog/authors/rakesh"},"socials":{"w":"https://qubitai.in","github":"https://github.com/rvbug"},"imageURL":"https://avatars.githubusercontent.com/u/10928536?v=4","key":"rakesh"}],"frontMatter":{"slug":"dotfiles","title":"Dotfiles","authors":["rakesh"],"tags":["dotfiles"]},"unlisted":false,"prevItem":{"title":"Transformer Block - Multihead Attention","permalink":"/notes/blog/transformers"},"nextItem":{"title":"Neovim IDE","permalink":"/notes/blog/Neovim"}}')}}]);