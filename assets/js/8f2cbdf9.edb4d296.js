"use strict";(self.webpackChunkdocumentation=self.webpackChunkdocumentation||[]).push([[145],{8332:n=>{n.exports=JSON.parse('{"archive":{"blogPosts":[{"id":"Introduction","metadata":{"permalink":"/notes/blog/Introduction","source":"@site/blog/2024-01-01/interstellar-science-blog.md","title":"Quantum Gravity - Intestellar","description":"Introduction","date":"2024-01-01T00:00:00.000Z","tags":[{"inline":true,"label":"Quantum Gravity","permalink":"/notes/blog/tags/quantum-gravity"}],"readingTime":2.965,"hasTruncateMarker":false,"authors":[{"name":"rakesh","title":"Sr. Engineering Manager","url":"https://qubitai.in","page":{"permalink":"/notes/blog/authors/rakesh"},"socials":{"w":"https://qubitai.in","github":"https://github.com/rvbug"},"imageURL":"https://avatars.githubusercontent.com/u/10928536?v=4","key":"rakesh"}],"frontMatter":{"slug":"Introduction","title":"Quantum Gravity - Intestellar","authors":["rakesh"],"tags":["Quantum Gravity"]},"unlisted":false,"nextItem":{"title":"Nix Introduction","permalink":"/notes/blog/Nix"}},"content":"## Introduction\\n\\nWhen Christopher Nolan\'s film \\"Interstellar\\" hit theaters, it wasn\'t just another sci-fi movie\u2014it was a scientifically rigorous exploration of some of the most mind-bending concepts in modern physics. Behind the film\'s stunning visuals was renowned theoretical physicist Kip Thorne, who ensured that the movie\'s scientific foundations were as accurate as possible.\\n\\n## Black Holes: Cosmic Enigmas\\n\\nOne of the most fascinating aspects of the book is its deep dive into black holes. Thorne explains these cosmic phenomena not as simple \\"cosmic vacuum cleaners,\\" but as complex gravitational systems that warp the very fabric of spacetime.\\n\\n### The Mathematics of Black Holes\\n\\nAt the heart of black hole physics is Einstein\'s field equation:\\n\\n*G*\u03bc\u03bd = 8\u03c0G/*c*\u2074 *T\u03bc\u03bd*\\n\\nWhere:\\n- *G*\u03bc\u03bd represents the curvature of spacetime\\n- *T\u03bc\u03bd* describes the distribution of matter and energy\\n- G is the gravitational constant\\n- *c* is the speed of light\\n\\nThis equation essentially tells us that mass and energy bend spacetime, creating what we experience as gravity.\\n\\n## Wormholes: Cosmic Shortcuts\\n\\nThorne explores the theoretical possibility of wormholes\u2014hypothetical tunnels through space-time that could create shortcuts for long journeys across the universe. While purely theoretical, the mathematics suggests they\'re not impossible.\\n\\nA simplified wormhole equation can be represented as:\\n\\n*d* = *c* * *t* / \u221a(1 - *v*\xb2/(*c*\xb2))\\n\\nWhere:\\n- *d* is distance\\n- *c* is the speed of light\\n- *t* is time\\n- *v* is velocity\\n\\n## Time Dilation: Not Just Science Fiction\\n\\nOne of the most mind-bending concepts in the book is time dilation\u2014how time can move differently depending on gravitational forces and velocity. Near a massive object like a black hole, time actually slows down relative to distant observers.\\n\\nThe time dilation factor can be calculated using:\\n\\n*t*\' = *t* / \u221a(1 - *v*\xb2/(*c*\xb2))\\n\\nWhere:\\n- *t*\' is the dilated time\\n- *t* is the proper time\\n- *v* is velocity\\n- *c* is the speed of light\\n\\n## Gravitational Waves: Ripples in Spacetime\\n\\nThorne was instrumental in the scientific understanding of gravitational waves\u2014ripples in the fabric of spacetime caused by massive cosmic events. These waves were theoretically predicted by Einstein and first directly observed in 2015, vindicating decades of scientific prediction.\\n\\nThe amplitude of a gravitational wave can be described by:\\n\\n*h* = 4G*M*/*c*\u2074*r*\\n\\nWhere:\\n- *h* is the wave amplitude\\n- *G* is the gravitational constant\\n- *M* is the mass of the generating object\\n- *c* is the speed of light\\n- *r* is the distance from the source\\n\\n## Beyond the Equations: A Human Story\\n\\nWhat makes Thorne\'s book remarkable is how it bridges pure scientific theory with human imagination. It demonstrates that the most complex scientific concepts can be understood with patience, curiosity, and a sense of wonder.\\n\\n## Conclusion\\n\\n\\"The Science of Interstellar\\" is more than a companion to a movie\u2014it\'s a gateway to understanding some of the most profound mysteries of our universe. It shows us that reality can be stranger and more beautiful than fiction.\\n\\n### Key Takeaways\\n- Black holes are not simple cosmic vacuums but complex spacetime phenomena\\n- Wormholes, while theoretical, are mathematically possible\\n- Time is relative and can be dramatically affected by gravity and velocity\\n- Gravitational waves confirm some of Einstein\'s most radical predictions\\n\\n## About the Author\\n\\nKip Thorne is not just a physicist, but a scientific consultant who ensured that \\"Interstellar\\" pushed the boundaries of scientific accuracy in cinema. His work bridges theoretical physics with popular understanding.\\n\\n*Disclaimer: While these equations are simplified, they provide a glimpse into the mathematical foundations of these complex cosmic phenomena.*"},{"id":"Nix","metadata":{"permalink":"/notes/blog/Nix","source":"@site/blog/2023-03-05-nix/Nix.md","title":"Nix Introduction","description":"Core Concepts","date":"2023-03-05T00:00:00.000Z","tags":[{"inline":false,"label":"nix","permalink":"/notes/blog/tags/nix","description":"Nix OS and Functional Package Manager"}],"readingTime":2.2,"hasTruncateMarker":false,"authors":[{"name":"rakesh","title":"Sr. Engineering Manager","url":"https://qubitai.in","page":{"permalink":"/notes/blog/authors/rakesh"},"socials":{"w":"https://qubitai.in","github":"https://github.com/rvbug"},"imageURL":"https://avatars.githubusercontent.com/u/10928536?v=4","key":"rakesh"}],"frontMatter":{"slug":"Nix","title":"Nix Introduction","authors":["rakesh"],"tags":["nix"]},"unlisted":false,"prevItem":{"title":"Quantum Gravity - Intestellar","permalink":"/notes/blog/Introduction"},"nextItem":{"title":"Nix Pkg Manager","permalink":"/notes/blog/Nix Pkgs"}},"content":"##  Core Concepts\\n\\n### 1. Immutability\\n\\nIn Nix, variables are immutable once defined:\\n\\n```nix\\nlet\\n  x = 5;\\n  # x = 6;  # This would cause an error\\nin x\\n```\\n\\n### 2. Let Bindings\\nNix uses let for local variable definitions:\\n```nix\\nlet\\n  greeting = \\"Hello\\";\\n  name = \\"World\\";\\nin greeting + \\" \\" + name\\n```\\n\\n### 3. Functions and Lambda Expressions\\nBasic Function Definition\\n\\n```nix\\nlet\\n  greet = name: \\"Hello, \\" + name;\\nin greet \\"Alice\\"  # Returns \\"Hello, Alice\\"\\n```\\n\\n### Multiple Parameter Functions\\n```nix\\nlet\\n  multiply = x: y: x * y;\\n  result = multiply 3 4;  # Returns 12 in result\\n```\\n\\n### 4. Pattern Matching and Attribute Sets\\nAttribute Set Creation\\n\\n```nix\\n{\\n  name = \\"John\\";\\n  age = 30;\\n  skills = [\\"Nix\\" \\"Functional Programming\\"];\\n}\\n```\\n\\n### Accessing Attributes\\n```nix\\nlet\\n  person = { name = \\"Alice\\"; age = 25; };\\nin person.name  # Returns \\"Alice\\"\\n```\\n\\n\\n### 5. Function with Attribute Sets\\n```nix\\nlet\\n  greet = { name, age }: \\"Hello ${name}, you are ${toString age}\\";\\n  \\n  result = greet { \\n    name = \\"Bob\\"; \\n    age = 35; \\n  }\\nin result\\n```\\n\\n### 6. Recursion and Recursive Sets\\n```nix\\nlet\\n  fibonacci = rec {\\n    fib0 = 0;\\n    fib1 = 1;\\n    fib2 = fib0 + fib1;\\n    fib3 = fib1 + fib2;\\n    # Continues recursively\\n  };\\nin fibonacci\\n```\\n\\n\\n### 7. Importing and Modules\\n```nix\\nlet\\n  # Importing another Nix file\\n  utils = import ./utils.nix;\\nin utils.someFunction\\n```\\n\\n### 8. List Comprehensions\\n```nix\\nlet\\n  numbers = [1 2 3 4 5];\\n  squared = map (x: x * x) numbers;\\nin squared  # [1 4 9 16 25]\\n```\\n\\n### 9. Conditional Expressions\\n```nix\\nlet\\n  checkAge = age: \\n    if age < 18 \\n    then \\"Minor\\" \\n    else \\"Adult\\";\\nin checkAge 20  # Returns \\"Adult\\"\\n```\\n\\n\\n##  Advanced Concepts\\nLazy Evaluation - Nix uses lazy evaluation, meaning expressions are only computed when needed:\\n```nix\\nlet\\n  expensiveComputation = \\n    builtins.trace \\"Computing...\\" \\n    (x: x * x);\\n  \\n  # Not evaluated until used\\n  result = expensiveComputation;\\nin result 42\\n```\\n\\nDerivations\\nThe core of Nix\'s package management:\\n\\n```nix\\nderivation {\\n  name = \\"example\\";\\n  builder = \\"/bin/sh\\";\\n  args = [ \\"-c\\" \\"echo hello > $out\\" ];\\n  system = \\"x86_64-linux\\";\\n}\\n```\\n\\n## Best Practices\\n\\n- Keep functions pure\\n- Avoid side effects\\n- Embrace immutability\\n- Use pattern matching\\n- Leverage lazy evaluation\\n\\n## Key Differences from Other Languages\\n\\n- No mutable state\\n- Functions are first-class citizens\\n- Strong emphasis on reproducibility\\n- Declarative package management\\n- Built-in support for functional programming paradigms\\n\\n## Conclusion\\nNix\'s functional programming syntax provides a unique approach to package management and system configuration, emphasizing reproducibility, purity, and declarative design."},{"id":"Nix Pkgs","metadata":{"permalink":"/notes/blog/Nix Pkgs","source":"@site/blog/2023-03-05-nix/index.md","title":"Nix Pkg Manager","description":"Nix is a powerful, purely functional package manager that provides a unique approach to software deployment and system configuration. Unlike traditional package managers, Nix focuses on:","date":"2023-03-05T00:00:00.000Z","tags":[{"inline":false,"label":"nix","permalink":"/notes/blog/tags/nix","description":"Nix OS and Functional Package Manager"}],"readingTime":4.205,"hasTruncateMarker":false,"authors":[{"name":"rakesh","title":"Sr. Engineering Manager","url":"https://qubitai.in","page":{"permalink":"/notes/blog/authors/rakesh"},"socials":{"w":"https://qubitai.in","github":"https://github.com/rvbug"},"imageURL":"https://avatars.githubusercontent.com/u/10928536?v=4","key":"rakesh"}],"frontMatter":{"slug":"Nix Pkgs","title":"Nix Pkg Manager","authors":["rakesh"],"tags":["nix"]},"unlisted":false,"prevItem":{"title":"Nix Introduction","permalink":"/notes/blog/Nix"},"nextItem":{"title":"What is Notion","permalink":"/notes/blog/2021/08/26/welcome/notion-productivity-guide"}},"content":"Nix is a powerful, purely functional package manager that provides a unique approach to software deployment and system configuration. Unlike traditional package managers, Nix focuses on:\\n\\n>-  Reproducibility  \\n>-  Atomic upgrades and rollbacks  \\n>-  Consistent development environments  \\n>-  Cross-platform compatibility  \\n\\n# Installation\\n\\n## MacOS\\n\\n```bash\\n# Install Nix using the official installer\\nsh <(curl -L https://nixos.org/nix/install)\\n\\n# For Apple Silicon (M1/M2) machines, use:\\nsh <(curl -L https://nixos.org/nix/install) --darwin-use-unencrypted-nix-store\\n```\\n\\n## Linux\\n```bash\\n# For most Linux distributions\\ncurl -L https://nixos.org/nix/install | sh\\n\\n# Multi-user installation (recommended)\\ncurl -L https://nixos.org/nix/install | sh -s -- --daemon\\n```\\n\\n\\n## Post Installation\\nSource the Nix profile. I prefer using zshrc.\\n\\n```bash\\n# Add to your shell configuration (.zshrc, .bashrc)\\nsource ~/.nix-profile/etc/profile.d/nix.sh\\n```\\n\\n## Nix Flakes\\nFlakes are a new feature in Nix that provide better reproducibility and composability. Create a `flake.nix` file in your project:\\n\\n```nix\\n{\\n  description = \\"My Dev Environment\\";\\n\\n  inputs = {\\n    nixpkgs.url = \\"github:NixOS/nixpkgs/nixos-unstable\\";\\n    home-manager = {\\n      url = \\"github:nix-community/home-manager\\";\\n      inputs.nixpkgs.follows = \\"nixpkgs\\";\\n    };\\n\\n    # Add inputs for your dotfile repositories\\n    nvim-config = {\\n      url = \\"github:yourusername/nvim-config\\";\\n      flake = false;  # Just fetch the source\\n    };\\n\\n    tmux-config = {\\n      url = \\"github:yourusername/tmux-config\\";\\n      flake = false;\\n    };\\n\\n    i3-config = {\\n      url = \\"github:yourusername/i3-config\\";\\n      flake = false;\\n    };\\n\\n  };\\n\\n  outputs = { self, nixpkgs, home-manager, nvim-config, tmux-config, i3-config }:\\n    let\\n      # This needs to be adjusted based on your system\\n      system = \\"x86_64-linux\\";  \\n      pkgs = nixpkgs.legacyPackages.${system};\\n    in {\\n      homeConfigurations.mydevenv = home-manager.lib.homeManagerConfiguration {\\n        inherit pkgs;\\n        modules = [ \\n          ./home.nix \\n          {\\n            # Pass the inputs to home-manager configuration\\n            home.file = {\\n              \\".config/nvim\\".source = nvim-config;\\n              \\".config/tmux\\".source = tmux-config;\\n              \\".config/i3\\".source = i3-config;\\n            };\\n          }\\n        ];\\n      };\\n    };\\n}\\n\\n```\\n\\n## Development Environment Setup\\n\\nCreate a `home.nix` file for comprehensive development environment configuration.  \\nHere\'s how my configuration looks like\\n\\n```nix\\n{ config, pkgs, ... }:\\n\\n{\\n  home = {\\n    username = \\"yourusername\\";\\n    homeDirectory = \\"/home/yourusername\\";\\n    stateVersion = \\"23.11\\";\\n\\n    packages = with pkgs; [\\n      # Development tools\\n      git\\n      neovim\\n      wezterm\\n      starship\\n      curl\\n      tmux\\n      rofi\\n      dunst\\n      feh\\n\\n      tmux\\n      \\n      # Language-specific tools\\n      python3\\n      rustup\\n      nodejs\\n      rust-analyzer\\n      \\n      # Utility tools\\n      ripgrep\\n      fd\\n      npm\\n      yarn\\n      lazygit\\n      tree\\n      tree-sitter\\n    ];\\n  };\\n\\n  # Neovim configuration from GitHub\\n  programs.neovim = {\\n    enable = true;\\n    extraConfig = \'\'\\n      lua << EOF\\n      -- Load configuration from GitHub repo\\n      vim.cmd(\'source ~/.config/nvim/init.lua\')\\n      EOF\\n    \'\';\\n  };\\n\\n  # Starship prompt configuration\\n  programs.starship = {\\n    enable = true;\\n    settings = {\\n      add_newline = false;\\n      character = {\\n        success_symbol = \\"[\u279c](bold green)\\";\\n        error_symbol = \\"[\u279c](bold red)\\";\\n      };\\n    };\\n  };\\n\\n  # WezTerm configuration\\n  programs.wezterm = {\\n    enable = true;\\n    extraConfig = \'\'\\n      return {\\n        font = wezterm.font(\\"JetBrains Mono\\"),\\n        color_scheme = \\"Dracula\\",\\n      }\\n    \'\';\\n  };\\n\\n  # Tmux configuration\\n    programs.tmux = {\\n        enable = true;\\n        shell = \\"${pkgs.zsh}/bin/zsh\\";\\n        terminal = \\"screen-256color\\";\\n        plugins = with pkgs.tmuxPlugins; [\\n            resurrect\\n            continuum\\n            # Add your preferred tmux plugins\\n        ];\\n        extraConfig = \'\'\\n            source-file ${../dotfiles/tmux/tmux.conf}\\n        \'\';\\n        };\\n}\\n\\n```\\n\\n\\n## Managing Dotfiles with Nix\\nTo manage dotfiles, create a separate repository with your configuration files and reference them in your Nix configuration:\\n\\n```nix\\n{\\n  home.file = {\\n    \\".config/nvim\\" = {\\n      source = fetchFromGitHub {\\n        owner = \\"yourusername\\";\\n        repo = \\"nvim-config\\";\\n        rev = \\"main\\";  # Or specific commit\\n        sha256 = \\"xxx\\";\\n      };\\n      recursive = true;\\n    };\\n  };\\n}\\n```\\n\\n## Applying the Configuration\\n\\n```nix\\n# Initialize and update flakes\\nnix flake update\\n\\n# Apply the home-manager configuration\\nhome-manager switch --flake .#mydevenv\\n```\\n\\n## Benefits of this Approach\\n\\n- Reproducibility: Exact same environment across machines\\n- Declarative Configuration: Define your entire setup in code\\n- Easy Rollbacks: Simple to revert to previous configurations\\n- Isolated Environments: No dependency conflicts\\n\\n## My Nix Configuration \\n\\n```markdown\\nnix-config/\\n\u2502\\n\u251c\u2500\u2500 flake.nix           # Main Nix flake configuration\\n\u251c\u2500\u2500 flake.lock          # Locked dependencies\\n\u2502\\n\u251c\u2500\u2500 home.nix            # Home Manager configuration\\n\u2502\\n\u251c\u2500\u2500 hosts/              # Machine-specific configurations\\n\u2502   \u251c\u2500\u2500 macbook/\\n\u2502   \u2502   \u2514\u2500\u2500 default.nix\\n\u2502   \u2514\u2500\u2500 workstation/\\n\u2502       \u2514\u2500\u2500 default.nix\\n\u2502\\n\u251c\u2500\u2500 modules/            # Reusable configuration modules\\n\u2502   \u251c\u2500\u2500 neovim/\\n\u2502   \u2502   \u251c\u2500\u2500 default.nix\\n\u2502   \u2502   \u2514\u2500\u2500 plugins.nix\\n\u2502   \u251c\u2500\u2500 starship.nix\\n\u2502   \u251c\u2500\u2500 wezterm.nix\\n\u2502   \u2514\u2500\u2500 git.nix\\n\u2502   \u251c\u2500\u2500 tmux/\\n\u2502   \u2502   \u251c\u2500\u2500 default.nix\\n\u2502   \u2502   \u2514\u2500\u2500 tmp.nix\\n\u2502   \u251c\u2500\u2500 i3/\\n\u2502   \u2502   \u2514\u2500\u2500 default.nix\\n\u2502   \\n\u2502   \\n\u251c\u2500\u2500 dotfiles/           # Actual dotfile configurations\\n\u2502   \u251c\u2500\u2500 nvim/\\n\u2502   \u2502   \u251c\u2500\u2500 init.lua\\n\u2502   \u2502   \u2514\u2500\u2500 lua/\\n\u2502   \u251c\u2500\u2500 starship.toml\\n\u2502   \u2514\u2500\u2500 wezterm.lua\\n\u2502   \u251c\u2500\u2500 tmux/\\n\u2502   \u2502   \u251c\u2500\u2500 tmux.conf   # Main tmux configuration\\n\u2502   \u2502   \u2514\u2500\u2500 plugins/   \\n\u2502   \u2502       \u251c\u2500\u2500 tpm/    # Tmux Plugin Manager (TPM) plugins\\n\u2502   \u2502       \u2514\u2500\u2500 other-plugins/\\n\u2502   \u251c\u2500\u2500 i3/\\n\u2502   \u2502   \u251c\u2500\u2500 config\\n\u2502   \\n\u2514\u2500\u2500 scripts/            # Utility scripts\\n    \u251c\u2500\u2500 setup.sh\\n    \u2514\u2500\u2500 update.sh\\n    \u2514\u2500\u2500 tmux-setup.sh  # Optional setup script for tmux\\n```\\n\\n## Troubleshooting\\n\\n- Ensure Nix daemon is running\\n- Check `~/.config/nixpkgs/config.nix` for global configurations\\n- Use nix-shell for temporary environments\\n\\n## Conclusion\\nNix provides a powerful, reproducible way to manage your development environment. By leveraging Nix flakes and home-manager, you can create consistent, version-controlled setups across multiple machines. If you want to know more about the nix functional package manager. Check out my quick guide [here](http://quibitai.in/notes/)\\n\\n## Additional Resources\\n\\n- Nix Official Documentation\\n- Home Manager GitHub\\n- Nix Flakes Guide\\n- [Nix Functional Package](http://quibitai.in/notes/)"},{"id":"/2021/08/26/welcome/notion-productivity-guide","metadata":{"permalink":"/notes/blog/2021/08/26/welcome/notion-productivity-guide","source":"@site/blog/2021-08-26-welcome/notion-productivity-guide.md","title":"What is Notion","description":"The Professional\'s Productivity Challenge","date":"2021-08-26T00:00:00.000Z","tags":[],"readingTime":2.33,"hasTruncateMarker":false,"authors":[],"frontMatter":{},"unlisted":false,"prevItem":{"title":"Nix Pkg Manager","permalink":"/notes/blog/Nix Pkgs"},"nextItem":{"title":"Introduction to Docusaurus","permalink":"/notes/blog/Intro to Docusaurus"}},"content":"## The Professional\'s Productivity Challenge\\n\\nAs a full-time software engineer balancing family life, personal projects, and professional responsibilities, I\'ve spent years searching for the ultimate productivity solution. In 2017, I discovered Notion \u2013 a game-changing platform that revolutionized how I manage my life, track projects, and transform ideas into actionable plans.\\n\\n## Notion: A Powerful Productivity Ecosystem\\n\\nNotion is far more than a simple productivity app. It\'s a versatile workspace that adapts to your unique workflow, combining note-taking, project management, databases, and collaboration tools into a single, customizable platform.\\n\\n## Deep Dive: Notion\'s Powerful Features\\n\\n### 1. Databases: The Backbone of Intelligent Organization\\n\\nNotion\'s databases are game-changers for personal productivity:\\n\\n#### Relational Databases\\n- **Link information across different pages**\\n- **Create complex, interconnected knowledge systems**\\n- **Track relationships between projects, goals, and tasks**\\n\\n#### Multiple View Types\\n- Table view for detailed tracking\\n- Kanban boards for visual progress\\n- Calendar view for time-based organization\\n- Gallery view for visual projects\\n\\n### 2. Dynamic Pages and Nested Information\\n\\n- Hierarchical page structure\\n- Unlimited nesting of pages\\n- Seamless information organization\\n- Context-rich documentation\\n\\n### 3. Powerful Formulas and Rollups\\n\\n- Spreadsheet-like calculations\\n- Aggregate data across databases\\n- Create dynamic, self-updating dashboards\\n- Automate tracking and reporting\\n\\n### 4. Linked Databases: Breaking Information Silos\\n\\n- Reference same database in multiple views\\n- Maintain data consistency\\n- Create project-specific perspectives\\n- Reduce redundant data entry\\n\\n### 5. Rich Embedding Capabilities\\n\\n- Embed images, videos, and external content\\n- Integrate with multiple platforms\\n- Create comprehensive, multimedia workspaces\\n- Centralize information from various sources\\n\\n## My Notion Ecosystem: Practical Implementation\\n\\n### Specialized Trackers\\n\\n1. **Travel Tracker**\\n   - Trip logging\\n   - Expense management\\n   - Future planning\\n   - Memory collection\\n\\n2. **Habit Tracker**\\n   - Daily/weekly habit monitoring\\n   - Progress visualization\\n   - Accountability mechanisms\\n\\n3. **Meal Planner**\\n   - Recipe management\\n   - Grocery lists\\n   - Nutrition tracking\\n\\n4. **Project Management**\\n   - Milestone tracking\\n   - Resource allocation\\n   - Progress monitoring\\n\\n## Integration Strategy\\n\\nNotion works best as part of a broader productivity ecosystem:\\n\\n- Apple Notes for quick captures\\n- Apple Reminders for time-sensitive tasks\\n- Apple Calendar for scheduling\\n\\n## Weekly Review Process\\n\\n- Review captured ideas\\n- Update project trackers\\n- Adjust goals\\n- Reflect on achievements\\n\\n## Key Advantages\\n\\n- **Flexibility**: Fully customizable workflows\\n- **Integration**: Connects life and work domains\\n- **Visualization**: Intuitive data representation\\n- **Accessibility**: Cross-device availability\\n- **Collaboration**: Easy sharing and teamwork\\n\\n## Technical Insights for Engineers\\n\\nThink of Notion like code:\\n- Templates = Modular code\\n- Databases = Structured data models\\n- Views = Different data rendering methods\\n\\n## Getting Started: Your Notion Journey\\n\\n1. Download Notion\\n2. Start with basic templates\\n3. Experiment gradually\\n4. Develop your unique system\\n\\nThe perfect productivity system evolves with you.\\n\\n*Disclaimer: Personal experience. Results may vary.*"},{"id":"Intro to Docusaurus","metadata":{"permalink":"/notes/blog/Intro to Docusaurus","source":"@site/blog/2017-03-05/2021-01-01-Docusarus.md","title":"Introduction to Docusaurus","description":"Docusaurus is an open-source static site generator specifically designed for creating documentation websites. Developed by Facebook (Meta), it provides a powerful and intuitive platform for building, deploying, and maintaining documentation sites with ease.","date":"2021-01-01T00:00:00.000Z","tags":[{"inline":true,"label":"docusaurus","permalink":"/notes/blog/tags/docusaurus"}],"readingTime":2.295,"hasTruncateMarker":true,"authors":[{"name":"rakesh","title":"Sr. Engineering Manager","url":"https://qubitai.in","page":{"permalink":"/notes/blog/authors/rakesh"},"socials":{"w":"https://qubitai.in","github":"https://github.com/rvbug"},"imageURL":"https://avatars.githubusercontent.com/u/10928536?v=4","key":"rakesh"}],"frontMatter":{"slug":"Intro to Docusaurus","title":"Introduction to Docusaurus","authors":["rakesh"],"tags":["docusaurus"]},"unlisted":false,"prevItem":{"title":"What is Notion","permalink":"/notes/blog/2021/08/26/welcome/notion-productivity-guide"},"nextItem":{"title":"Welcome","permalink":"/notes/blog/welcome"}},"content":"# Introduction\\n\\nDocusaurus is an open-source static site generator specifically designed for creating documentation websites. Developed by Facebook (Meta), it provides a powerful and intuitive platform for building, deploying, and maintaining documentation sites with ease.\\n\\n\x3c!-- truncate --\x3e\\n\\n# What is Docusaurus?\\nDocusaurus is a modern static website generator that helps developers and teams create, build, and publish documentation websites quickly and efficiently. It leverages React and provides a clean, customizable interface with built-in features that make documentation management seamless.\\n\\n# Key Features and Advantages\\n### Easy Setup and Configuration\\n\\n- Quick initialization with minimal configuration\\n- Built-in best practices for documentation sites\\n- Supports both single and multi-version documentation\\n\\n### Powerful Customization\\n\\n- Fully customizable React-based themes\\n- Support for custom layouts and components\\n- Flexible styling options\\n\\n### Developer-Friendly Features\\n\\n- Markdown support with enhanced features\\n-  Built-in search functionality\\n- Internationalization (i18n) support\\n- Versioning for documentation\\n\\n### Performance and SEO\\n- Static site generation for fast loading\\n- Optimized for search engines\\n- Responsive design out of the box\\n\\n# Getting Started with Docusaurus\\n## Installation\\nYou can create a new Docusaurus project using either `yarn` or `npm`:\\n\\n### Using Yarn\\n\\n```bash\\nyarn create docusaurus my-website classic\\n```\\n\\n### Using npm\\n```bash\\nnpx create-docusaurus@latest my-website classic\\n```\\n\\n\\n### project Structure\\n```markdown\\nmy-website/\\n\u2502\\n\u251c\u2500\u2500 docs/                  # Markdown documentation files\\n\u251c\u2500\u2500 blog/                  # Blog posts\\n\u251c\u2500\u2500 src/                   # Custom React components\\n\u2502   \u251c\u2500\u2500 components/\\n\u2502   \u2514\u2500\u2500 pages/\\n\u251c\u2500\u2500 static/                # Static assets\\n\u251c\u2500\u2500 docusaurus.config.js   # Configuration file\\n\u251c\u2500\u2500 sidebars.js            # Sidebar configuration\\n\u2514\u2500\u2500 package.json           # Project dependencies\\n\\n```\\n\\n\\n\\n### Confguration\\n\\nThe primary configuration file is `docusaurus.config.js`. Here\'s a basic example:\\n\\n```js\\nmodule.exports = {\\n  title: \'My Documentation Site\',\\n  tagline: \'Awesome Documentation\',\\n  url: \'https://your-website.com\',\\n  baseUrl: \'/\',\\n  theme: \'@docusaurus/theme-classic\',\\n  presets: [\\n    [\\n      \'@docusaurus/preset-classic\',\\n      {\\n        docs: {\\n          sidebarPath: require.resolve(\'./sidebars.js\'),\\n        },\\n        blog: {\\n          showReadingTime: true,\\n        },\\n        theme: {\\n          customCss: require.resolve(\'./src/css/custom.css\'),\\n        },\\n      },\\n    ],\\n  ],\\n};\\n```\\n\\n### Bulding the site\\n\\nStart the local development server\\n```bash\\nyarn start\\n# or\\nnpm run start\\n```\\n\\n### Publishing the site\\n\\nDocusaurus provides built-in support for GitHub Pages:\\n\\n```bash\\nGIT_USER=<GITHUB_USERNAME> yarn deploy\\n# or\\nUSE_SSH=true yarn deploy\\n```\\n\\n# Best Practices\\n\\n1. Keep documentation organized\\n2. Use clear, concise language\\n3. Implement versioning for stable releases\\n4. Utilize built-in search and navigation features\\n5. Regularly update and maintain documentation\\n\\n\\n# Markdown\\n```markdown\\n---\\nid: getting-started\\ntitle: Getting Started\\nsidebar_label: Introduction\\n---\\n\\n# Welcome to Our Documentation\\n\\nThis is a sample documentation page with some information.\\n\\n## Key Concepts\\n\\n- Simple markdown writing\\n- Easy configuration\\n- Powerful features\\n```\\n\\n# Conclusion\\nDocusaurus provides a modern, efficient solution for creating and maintaining documentation websites. Its combination of ease of use, powerful features, and flexibility makes it an excellent choice for projects of all sizes."},{"id":"welcome","metadata":{"permalink":"/notes/blog/welcome","source":"@site/blog/2017-03-05/index.md","title":"Welcome","description":"Welcome to my blog site which is hosted on QuBiTAi using Docusaurus.","date":"2017-03-05T00:00:00.000Z","tags":[{"inline":false,"label":"Hello","permalink":"/notes/blog/tags/hello","description":"Hello tag description"}],"readingTime":0.06,"hasTruncateMarker":false,"authors":[{"name":"rakesh","title":"Sr. Engineering Manager","url":"https://qubitai.in","page":{"permalink":"/notes/blog/authors/rakesh"},"socials":{"w":"https://qubitai.in","github":"https://github.com/rvbug"},"imageURL":"https://avatars.githubusercontent.com/u/10928536?v=4","key":"rakesh"}],"frontMatter":{"slug":"welcome","title":"Welcome","authors":["rakesh"],"tags":["hello"]},"unlisted":false,"prevItem":{"title":"Introduction to Docusaurus","permalink":"/notes/blog/Intro to Docusaurus"}},"content":"Welcome to my blog site which is hosted on [QuBiTAi](https://qubitai.in) using Docusaurus."}]}}')}}]);